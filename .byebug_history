continue
@@camera.width = 200
continue
img = @@camera.query
img.encode_image('.jpg', CV_IMWRITE_JPEG_QUALITY: 10)
img = @@camera.query
img = @@camera.grab
img = @@camera.retrieve
@@camera
continue
c.data
c.class
c = a.retrieve
b.class
b = a.grab
a = OpenCV::CvCapture.open(:v4l2)
OpenCV::CvCapture.open(:v4l2)
OpenCV::CvCapture::INTERFACE
OpenCV::CvCapture.INTERFACE
OpenCV::CvCapture.open('v4l')
OpenCV::CvCapture.open('v4l2')
OpenCV::CvCapture.open('vl42')
OpenCV::CvCapture.open(''vl42)
jpg.pack('C*')
jpg.pack('C
jpg.pack('C')
jpg.pack(s5)
jpg.pack
jpg
continue
jpg.data
content
continue
jpg.data
jpg.methods
jpg.
jpg.to_8u
jpg.methods
jpg.to_blob
jpg
continue
jpg.to_s
jpg.class
continue
jpg.to_byte
jpg
jpg.to_s
jpg
continue
img.to_ubytergb.to_a[0][0].class
img.to_ubytergb.to_a[0][0].to_byte
img.to_ubytergb.to_a[0][0].to_s
img.to_ubytergb.to_a[0][0].to_i
img.to_ubytergb.to_a[0][0].methods
img.to_ubytergb.to_a[0][0]
img.to_ubytergb[0]
img.to_ubytergb.to_a[0]
img.to_ubytergb.to_a.to_s
img.to_ubytergb.to_a
img.to_ubytergb
img.to_ubytergb.shape
img.to_ubytergb.class
img.to_ubytergb.decompose
img.to_ubytergb.methods
img.to_ubytergb.
img.to_ubytergb.metho
img.to_ubytergb.methods
img.to_ubytergb.to_a
img.to_ubytergb.to_s
img.to_ubytergb.methods
img.to_ubytergb
img.orig_to_type
img.html_safe?
img.html_safe
img.hash
img.to_s
img.show
img.methods
img.class
img.to_magick
continue
img.to_type(Hornetseye::I420)
img.to_type(Hornetseye::MJPG)
img.to_type('MJPG')
img.to_type(MJPG)
img.to_s
img.to_jpg
img.to_png
img.typecode
img.to_type(RGB)
img.to_type('RGB')
img.dup
img
img.to_a
img.to_magick
img.to_ubytergb.to_blob
img.to_ubytergb
img.to_ubytergb.to_blob
img.to_ubytergb
img.to_magick
img.to_blob
img.to_bolb
img
img.show
img.methods
img.write( 'demo_compressed.jpg' ) { self.quality = 10 }
continue
c
continue
Base64.decode64(img)
Base64.decode64(img
Base64.decode64(img.to_ubytergb
Bise64.decode64(img.to_ubytergb)
img.to_ubytergb
img.to_ubytergb.to_i
img.to_i
img.show
img.to_ubytergb.to_s
img.to_ubytergb
content
